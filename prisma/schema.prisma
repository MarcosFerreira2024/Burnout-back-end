// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  photo      String?
  password   String
  status     Boolean       @default(false)
  email      String        @unique
  fav        favoritos[]
  comments   comentarios[]
  code       code?
  avaliacoes avaliacoes[]

  @@map("Users")
}

model favoritos {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  product   produtos @relation(fields: [productId], references: [id])

  @@map("Favoritos")
}

model produtos {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  name       String        @unique
  price      String
  size       String[]
  photo      String
  colorName  String
  colorHex   String
  category   String[]
  frete      String
  rating     Float?        @default(5.0)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  fav        favoritos[]
  comments   comentarios[]
  avaliacoes avaliacoes[]

  @@map("Produtos")
}

model avaliacoes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  product   produtos @relation(fields: [productId], references: [id])
}

model comentarios {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  produto   produtos @relation(fields: [productId], references: [id])
  likes     Int
  deslikes  Int
  response  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Comentarios")
}

model code {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  used      Boolean  @default(false)
  userId    String   @unique @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("Codes")
}
